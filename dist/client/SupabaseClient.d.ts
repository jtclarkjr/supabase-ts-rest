import { ClientConfig, AuthTokenResponse, TokenRequestPayload, QueryParams, HttpMethod } from '../types';
export declare function createSupabaseClient(config: ClientConfig): {
    baseUrl: string;
    apiKey: string;
    readonly token: string | undefined;
    setToken: (newToken: string) => void;
    getToken: () => string | undefined;
    doRequest: (method: HttpMethod, endpoint: string, queryParams?: QueryParams, body?: unknown) => Promise<unknown>;
    authRequest: (endpoint: string, payload: TokenRequestPayload) => Promise<AuthTokenResponse>;
    signUp: (email: string, password: string) => Promise<unknown>;
    signIn: (email: string, password: string) => Promise<AuthTokenResponse>;
    refreshToken: (refreshTokenValue: string) => Promise<AuthTokenResponse>;
    sendMagicLink: (email: string) => Promise<unknown>;
    sendPasswordRecovery: (email: string) => Promise<unknown>;
    verifyOTP: (email: string, tokenValue: string, otpType: string) => Promise<unknown>;
    getUser: () => Promise<unknown>;
    updateUser: (payload: Record<string, unknown>) => Promise<unknown>;
    signOut: () => Promise<unknown>;
    inviteUser: (email: string) => Promise<unknown>;
    resetPassword: (tokenValue: string, newPassword: string) => Promise<unknown>;
    get: (endpoint: string, queryParams?: QueryParams) => Promise<unknown>;
    post: (endpoint: string, data: unknown) => Promise<unknown>;
    put: (endpoint: string, primaryKeyName: string, primaryKeyValue: string, data: unknown) => Promise<unknown>;
    patch: (endpoint: string, queryParams: QueryParams, data: unknown) => Promise<unknown>;
    delete: (endpoint: string, primaryKeyName: string, primaryKeyValue: string) => Promise<unknown>;
    TOKEN_API_PATH: string;
    SIGNUP_API_PATH: string;
    MAGIC_LINK_API_PATH: string;
    RECOVER_API_PATH: string;
    VERIFY_API_PATH: string;
    USER_API_PATH: string;
    LOGOUT_API_PATH: string;
    INVITE_API_PATH: string;
    RESET_API_PATH: string;
    ERROR_MESSAGES: {
        readonly INVALID_RESPONSE: "Invalid response from server";
        readonly REQUEST_FAILED: "Request failed";
        readonly INVALID_CONFIG: "Invalid client configuration";
        readonly NETWORK_ERROR: "Network error occurred";
        readonly PARSE_ERROR: "Failed to parse response";
    };
};
export type SupabaseClient = ReturnType<typeof createSupabaseClient>;
//# sourceMappingURL=SupabaseClient.d.ts.map